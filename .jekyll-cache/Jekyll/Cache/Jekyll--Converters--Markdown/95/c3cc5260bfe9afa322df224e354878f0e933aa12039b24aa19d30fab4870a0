I"‰<p>This week the <a href="http://www.eclipse.org/sirius/">Sirius</a> blog <a href="http://melb.enix.org/category/sirius/">post series</a> presents ¬´How to integrate validation rules on a diagram ?¬ª.</p>

<p>EMF provides a powerful validation system which helps you detect errors in your model. But sometimes you would like to add more rules not already implemented in your metamodel. Sirius is there again!</p>

<p>Imagine that we would like to represent the well known Arcade game from the <a href="http://en.wikipedia.org/w/index.php?title=Wreck-It_Ralph">Wreck it Ralph!</a> movie.<br />
<img src="https://raw.githubusercontent.com/mbats/sirius-blog/master/validation/blog/images/Wreckitralphposter.jpeg" alt="" /></p>

<p>We define a metamodel to represent the <code class="language-plaintext highlighter-rouge">Building</code> present in the game.<br />
<img src="https://raw.githubusercontent.com/mbats/sirius-blog/master/validation/blog/images/metamodel.png" alt="" /></p>

<p>We also define an <code class="language-plaintext highlighter-rouge">isFixed</code> attribute that indicates whether the building is broken or not and so if it needs to be fixed.</p>

<h2 id="semantic-validation">Semantic validation</h2>

<p>Then we create a new Sirius specification project and we define a viewpoint with a new diagram named <code class="language-plaintext highlighter-rouge">SemanticValidation</code>. A <code class="language-plaintext highlighter-rouge">Building</code> mapping is added and provides two different styles according to whether the building is broken or not.<br />
<img src="https://raw.githubusercontent.com/mbats/sirius-blog/master/validation/blog/images/semanticvalidation_vsm.png" alt="" /></p>

<p>We create a model example defining a <code class="language-plaintext highlighter-rouge">Game</code> element and a <code class="language-plaintext highlighter-rouge">Building</code>, we activate our new viewpoint and create a new <em>SemanticValidation</em> diagram.<br />
<img src="https://raw.githubusercontent.com/mbats/sirius-blog/master/validation/blog/images/semanticvalidation.png" alt="" /></p>

<p>We create also a <em>Wreck it</em> tool which can be applied on a Building and set the <code class="language-plaintext highlighter-rouge">isFixed</code> attribute to <code class="language-plaintext highlighter-rouge">false</code>. After applying the tool on the building the diagram looks as below:<br />
<img src="https://raw.githubusercontent.com/mbats/sirius-blog/master/validation/blog/images/semanticvalidation_wreck.png" alt="" /></p>

<p>Next a rule is defined to detect when the <code class="language-plaintext highlighter-rouge">isFixed</code> attribute is set to <code class="language-plaintext highlighter-rouge">false</code>. We improve our diagram specification by adding a new <a href="http://www.eclipse.org/sirius/doc/specifier/diagrams/Diagrams.html#validation">Validation rule</a>. To do so on the diagram specification element, select <code class="language-plaintext highlighter-rouge">New Validation &gt; Validation</code> and create a <code class="language-plaintext highlighter-rouge">Semantic Validation Rule</code>.<br />
<img src="https://raw.githubusercontent.com/mbats/sirius-blog/master/validation/blog/images/semanticvalidationrule_vsm.png" alt="" /></p>

<p>Then, we set :</p>

<ul>
  <li>the <code class="language-plaintext highlighter-rouge">Level</code>: severity of issues reported when the validation rule is broken. It could be <code class="language-plaintext highlighter-rouge">Information</code>, <code class="language-plaintext highlighter-rouge">Warning</code> or <code class="language-plaintext highlighter-rouge">Error</code>.</li>
  <li>the <code class="language-plaintext highlighter-rouge">target class</code>: type of semantic element checked by the rule.</li>
  <li>the <code class="language-plaintext highlighter-rouge">Message</code>: message shown to the user in the <em>Problems</em> view when the validation failed.</li>
</ul>

<p>An <code class="language-plaintext highlighter-rouge">Audit</code> element must be also defined to provide the expression that must be checked to validate the rule. When the expression evaluates to true, no validation issues are reported. Otherwise, issues will be listed in the <em>Problems</em> view. It is possible to define several audits for one rule, in this case the rule is considered as violated if at least one audit applies.<br />
<img src="https://raw.githubusercontent.com/mbats/sirius-blog/master/validation/blog/images/audit.png" alt="" /></p>

<p>The user can call the validation thanks to a right click on the diagram background and by selecting the <em>Validate diagram</em> menu:<br />
<img src="https://raw.githubusercontent.com/mbats/sirius-blog/master/validation/blog/images/validate_diagram.png" alt="" /></p>

<p>If we activate the validation on our wrecked building, we get one error:<br />
<img src="https://raw.githubusercontent.com/mbats/sirius-blog/master/validation/blog/images/semanticvalidation_error.png" alt="" /></p>

<p>On the diagram, the validation issue is also visible thanks to an error decorator added on the figure:<br />
<img src="https://raw.githubusercontent.com/mbats/sirius-blog/master/validation/blog/images/error_decorator.png" alt="" /></p>

<h2 id="view-validation">View validation</h2>

<p>Another possibility is to define validation rules based on graphical elements instead of the semantic ones.<br />
We create another representation named <em>ViewValidation</em> which provides a view validation rule:<br />
<img src="https://raw.githubusercontent.com/mbats/sirius-blog/master/validation/blog/images/viewvalidationrule_vsm.png" alt="" /></p>

<p>In this case, the validation rule will be applied on a mapping.</p>

<p>This time an error will be thrown when the border color RGB red component of the building will be different than 239.<br />
We define also a quick fix which also modified the semantic model to fix the building again.</p>

<h2 id="quick-fix">Quick fix</h2>

<p>Eclipse users love their IDE because it is very often capable of proposing a <em>Quick fix</em> functionality for typical problems. Sirius allows to easily implement such a Quick fix feature, let‚Äôs call it <em>‚ÄúFelix quick fix it‚Äù</em>:<br />
<img src="https://raw.githubusercontent.com/mbats/sirius-blog/master/validation/blog/images/Fix-It-Felix.jpg" alt="" /></p>

<p>On the validation rule element, we define the <code class="language-plaintext highlighter-rouge">Fix</code>.<br />
<img src="https://raw.githubusercontent.com/mbats/sirius-blog/master/validation/blog/images/fix_vsm.png" alt="" /></p>

<p>We set the fix message and define how the fix will update the model. Finally if we launch the quick fix on our example, it just changes the value of the <code class="language-plaintext highlighter-rouge">isFixed</code> attribute to <code class="language-plaintext highlighter-rouge">true</code>.<br />
<img src="https://raw.githubusercontent.com/mbats/sirius-blog/master/validation/blog/images/quickfix1.png" alt="" /><br />
<img src="https://raw.githubusercontent.com/mbats/sirius-blog/master/validation/blog/images/quickfix2.png" alt="" /></p>

<p>Thanks to Sirius and Felix our building is all fixed.<br />
<img src="https://raw.githubusercontent.com/mbats/sirius-blog/master/validation/blog/images/semanticvalidation.png" alt="" /></p>

<p>You can wreck it again‚Ä¶ thanks Ralph‚Ä¶</p>

<p>The sample code from this example is available on github: <a href="https://github.com/mbats/sirius-blog/tree/master/validation">https://github.com/mbats/sirius-blog/tree/master/validation</a></p>
:ET